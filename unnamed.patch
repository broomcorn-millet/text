Index: src/AbstactFactory/SingleFastObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/AbstactFactory/SingleFastObject.java	(date 1566873209000)
+++ src/AbstactFactory/SingleFastObject.java	(date 1566873209000)
@@ -0,0 +1,25 @@
+package AbstactFactory;
+
+public class SingleFastObject {
+    //在调用方法前就已经被创建　立即加载方式＝＝恶汉模式
+    private static SingleFastObject instance=new SingleFastObject();
+    private SingleFastObject(){
+
+    }
+    public static SingleFastObject getIstance()
+    {
+        // 此代码版本为立即加载
+        // 此版本代码的缺点是不能有其他实例变量
+        // 因为getInstance()方法没有同步
+        // 所以有可能出现非线程安全的问题
+
+        return instance;
+    }
+    public void showMessage(){
+        System.out.println("Hello World!");
+    }
+    public static void main(String[]args){
+        SingleFastObject object= SingleFastObject.getIstance();
+        object.showMessage();
+    }
+}
Index: src/AbstactFactory/SingleLazyObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/AbstactFactory/SingleLazyObject.java	(date 1566873209000)
+++ src/AbstactFactory/SingleLazyObject.java	(date 1566873209000)
@@ -0,0 +1,26 @@
+package AbstactFactory;
+
+public class SingleLazyObject {
+    private static SingleLazyObject slo;
+//延迟加载/懒汉式
+//
+//【建对象的实例】
+    public SingleLazyObject() {
+    }
+
+    public static SingleLazyObject getInstance() {
+        if(slo!=null){
+
+        }else {
+            slo=new SingleLazyObject();
+        }return slo;
+    }
+    public void showMessage(){
+        System.out.println("Hello World!");
+    }
+
+    public static void main(String[]args){
+        SingleLazyObject object=new SingleLazyObject();
+        object.showMessage();
+    }
+}
Index: src/AbstactFactory/SingleObject.java
===================================================================
--- src/AbstactFactory/SingleObject.java	(revision c7d77ab7a97980f1e88af6f5c9e06949131d6326)
+++ src/AbstactFactory/SingleObject.java	(revision c7d77ab7a97980f1e88af6f5c9e06949131d6326)
@@ -1,14 +0,0 @@
-package AbstactFactory;
-
-public class SingleObject {
-    private static SingleObject instance=new SingleObject();
-    private SingleObject(){
-
-    }
-    public static SingleObject getIstance(){
-        return instance;
-    }
-    public void showMessage(){
-        System.out.println("Hello World!");
-    }
-}
Index: src/AbstactFactory/SinglePatternDemo.java
===================================================================
--- src/AbstactFactory/SinglePatternDemo.java	(revision c7d77ab7a97980f1e88af6f5c9e06949131d6326)
+++ src/AbstactFactory/SinglePatternDemo.java	(revision c7d77ab7a97980f1e88af6f5c9e06949131d6326)
@@ -1,8 +0,0 @@
-package AbstactFactory;
-
-public class SinglePatternDemo {
-    public static void main(String[]args){
-          SingleObject object=SingleObject.getIstance();
-          object.showMessage();
-    }
-}
Index: src/Iteratordemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Iteratordemo.java	(date 1566873209000)
+++ src/Iteratordemo.java	(date 1566873209000)
@@ -0,0 +1,17 @@
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+/*迭代器应用　Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，
+ 它可以从两个方向遍历List，也可以从List中插入和删除元素。*/
+public class Iteratordemo {
+    public static void main(String[]args){
+        List list=new ArrayList();
+        list.add("aa");
+        list.add("bb");
+        list.add("cc");
+        for(Iterator iter=list.iterator();iter.hasNext();){
+            String str=(String)iter.next();
+            System.out.println(str);
+        }
+    }
+}
Index: src/TestVector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/TestVector.java	(date 1566873209000)
+++ src/TestVector.java	(date 1566873209000)
@@ -0,0 +1,42 @@
+import java.util.Enumeration;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Vector;
+//Vector是有序的，可以重复的。
+public class TestVector {
+    public static void main(String[]args){
+           new TestVector().test01();
+    }
+
+    private void test01() {
+        Vector<String> hs=new Vector<String>();
+        hs.add("aa");
+        hs.add("bb");
+        hs.add("dd");
+        hs.add("cc");
+        hs.add("aa");
+        hs.add("dd");
+        printSet2(hs);
+        System.out.println("---------------------");
+        printSet(hs);
+    }
+  private void printSet(List hs){
+        Iterator iterator=hs.iterator();
+        while(iterator.hasNext()){
+            System.out.println(iterator.next());
+        }
+
+  }
+/*
+   此方法将向量对象对应到一个枚举类型。java.util包中的其他类中也都有这类方法，以便于用户获取对应的枚举类型。
+   在Enumeration中封装了有关枚举数据集合的方法。
+  　　方法 hasMoreElement() 来判断集合中是否还有其他元素。
+        方法 nextElement() 来获取下一个元素
+ */
+    private void printSet2(Vector<String> hs) {
+        Enumeration<String> element=hs.elements();
+        while(element.hasMoreElements()){
+            System.out.println(element.nextElement());
+        }
+    }
+}
Index: src/Wait_Notify.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Wait_Notify.java	(date 1566873209000)
+++ src/Wait_Notify.java	(date 1566873209000)
@@ -0,0 +1,88 @@
+import java.util.Vector;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class Wait_Notify{
+
+
+
+
+    //生产者
+    static class Producer  implements Runnable {
+  private final Vector shareQueue;
+  private final int Size;
+
+    public Producer(Vector shareQueue, int size) {
+        this.shareQueue = shareQueue;
+        Size = size;
+    }
+
+    @Override
+    public void run() {
+     for(int i=0;i<7;i++){
+         System.out.println("Prouced"+i);
+         try {
+             produce(i);
+         } catch (InterruptedException e) {
+             Logger.getLogger(Producer.class.getName()).log(Level.SEVERE,null,e);
+         }
+     }
+
+    }
+    private void produce(int i) throws InterruptedException {
+        while (shareQueue.size()==Size){
+            synchronized (shareQueue){
+                System.out.println("Queue is full"+Thread.currentThread().getName()+"is waiting<size"+shareQueue.size());
+                shareQueue.wait();
+            }
+        }
+        synchronized (shareQueue){
+            shareQueue.add(i);
+            shareQueue.notifyAll();
+        }
+    }
+}
+//消费者
+static class Consumer implements Runnable{
+     private final Vector sharedQueue;
+     private final  int Size;
+     public Consumer(Vector sharedQueue, int size){
+         this.sharedQueue = sharedQueue;
+         Size = size;
+     }
+    @Override
+    public void run() {
+        while (true){
+            try{
+                System.out.println("Consumer:"+consume());
+            } catch (InterruptedException e) {
+                Logger.getLogger(Consumer.class.getName()).log(Level.SEVERE,null,e);
+            }
+        }
+    }
+
+    private int consume() throws InterruptedException {
+        while(sharedQueue.isEmpty()){
+            synchronized (sharedQueue){
+                System.out.println("Queue is empty"+Thread.currentThread().getName()+"is waiting<size:"+sharedQueue.size());
+                sharedQueue.wait();
+            }}
+            synchronized (sharedQueue){
+                sharedQueue.notifyAll();
+                return (Integer)sharedQueue.remove(0);
+            }
+        }
+
+}
+public static void main(String[]args){
+      Vector sharedQueue =new Vector();
+      int size=4;
+      Thread prodaThread=new Thread(new Producer(sharedQueue,size),"Producer");
+      Thread consThread=new Thread(new Consumer(sharedQueue,size),"Consumer");
+      prodaThread.start();
+      consThread.start();
+}
+
+
+
+}
